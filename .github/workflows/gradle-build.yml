name: Spring Boot & Gradle CI/CD

on:
  push:
    branches: [ "main" ]
#  pull_request:
#   branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # .properties file 생성
      - name: application.properties 생성
        run: |
          mkdir ./src/main/resources
          touch ./src/main/resources/application.properties
          
          echo spring.jpa.hibernate.ddl-auto=update >>./src/main/resources/application.properties
          
          echo spring.datasource.url=${{ secrets.DATASOURCE_URL }} >>./src/main/resources/application.properties
          echo spring.datasource.username=${{ secrets.DATASOURCE_USERNAME }} >>./src/main/resources/application.properties
          echo spring.datasource.password=${{ secrets.DATASOURCE_PASSWORD }} >>./src/main/resources/application.properties
          echo spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver >>./src/main/resources/application.properties
          
          echo server.port=${{ secrets.PORT }} >>./src/main/resources/application.properties
          
          echo jwt-secret-key=${{ secrets.JWT_SECRET_KEY }} >>./src/main/resources/application.properties
          
          echo aws.s3.bucket=${{ secrets.S3_BUCKET }} >>./src/main/resources/application.properties
          echo aws.s3.stack.auto=${{ secrets.S3_STACK_AUTO }} >>./src/main/resources/application.properties
          echo aws.s3.region.static=${{ secrets.S3_REGION_STATIC }} >>./src/main/resources/application.properties
          echo aws.s3.credentials.accessKey=${{ secrets.S3_CREDENTIALS_ACCESSKEY }} >>./src/main/resources/application.properties
          echo aws.s3.credentials.secretKey=${{ secrets.S3_CREDENTIALS_SECRETKEY }} >>./src/main/resources/application.properties

      # JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'oracle'

      # Spring Boot Application Build
      - name: Spring Boot Application Build
        run: ./gradlew build

      # DockerHub Login
      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME}}
          password: ${{ secrets.DOCKERHUB_PASSWORD}}

      # Docker Image Build
      - name: Docker Image Build
        run: docker build --platform linux --build-arg DEPENDENCY=build/dependency -t ${{ secrets.DOCKERHUB_USERNAME}}/${{ secrets.PROJECT_NAME }} .

      # DockerHub Push
      - name: DockerHub Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}

      # EC2 Instance 접속 및 애플리케이션 실행
      - name: Run Application
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}

          script: |
            sudo docker kill ${{ secrets.PROJECT_NAME }}
            sudo docker rm -f ${{ secrets.PROJECT_NAME }}
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}
            
            sudo docker run -p ${{ secrets.PORT }}:${{ secrets.PORT }} \
            --name ${{ secrets.PROJECT_NAME }} \
            -d ${{ secrets.DOCKERHUB_USERNAME}}/${{ secrets.PROJECT_NAME }}